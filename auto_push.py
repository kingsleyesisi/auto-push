#!/usr/bin/env python3

import os
import time
import subprocess
from datetime import datetime

# ─── CONFIGURATION ────────────────────────────────────────────────────────────

# Absolute path to your local repo clone
REPO_DIR = 'auto-push/'  # Change this to your local repo path

# Path (relative to REPO_DIR) of the file you want to modify
TARGET_FILE = "file.txt"

# Branch you want to push to
BRANCH = "main"

# Remote name (usually "origin")
REMOTE = "origin"

# Commit message prefix
COMMIT_PREFIX = "Automated update"

COUNT = 0  # Initialize a counter for the number of updates

def counter():
    """Increment the counter and return the current value."""
    global COUNT
    COUNT += 1
    return COUNT
# ─── END CONFIGURATION ────────────────────────────────────────────────────────

def run_cmd(cmd, **kwargs):
    """Run a shell command and raise if it fails."""
    subprocess.run(cmd, check=True, **kwargs)

def setup_remote_with_token():
    """Reconfigure the 'origin' remote to include your PAT for authentication."""
    token = os.getenv("GITHUB_TOKEN")
    if not token:
        raise RuntimeError("Please set the GITHUB_TOKEN environment variable.")
    # Replace these with your own GitHub username and repo name:
    repo_slug = "kingsleyesisi/auto-push"  
    auth_url = f"https://{token}@github.com/{repo_slug}.git"
    run_cmd(["git", "remote", "set-url", REMOTE, auth_url])

def modify_file():
    """Ensure the file exists and append a UTC timestamp line to the file."""
    path = os.path.join(REPO_DIR, TARGET_FILE)
    os.makedirs(os.path.dirname(path), exist_ok=True)  # Ensure the directory exists
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%SZ")
    with open(path, "a") as f:  # Open in append mode, creating the file if it doesn't exist
        f.write(f"No. ({counter()})This is a autogenerated file to give U all green  Updated at {now}\n")

def commit_and_push():
    """Stage the change, commit with timestamp, and push."""
    # Stage
    run_cmd(["git", "add", TARGET_FILE], cwd=REPO_DIR)
    # Commit
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%SZ")
    msg = f"{COMMIT_PREFIX} {now}"
    run_cmd(["git", "commit", "-m", msg], cwd=REPO_DIR)
    # Push
    run_cmd(["git", "push", REMOTE, BRANCH], cwd=REPO_DIR)

def main_loop():
    """Infinite loop: modify → commit → push → sleep 30 min."""
    os.chdir(REPO_DIR)
    setup_remote_with_token()
    print("Starting automated update loop. Press Ctrl+C to stop.")
    while True:
        try:
            modify_file()
            commit_and_push()
            print(f"[{datetime.now().isoformat()}] Update pushed.")
            print(f' This is the - {counter()} time of update')

        except Exception as e:
            print(f"⚠️  Error during update: {e}")
        # Sleep for 30 minutes
        time.sleep(2 * 60)

if __name__ == "__main__":
    main_loop()
